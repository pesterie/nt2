.. _functor_macro:

Function Generation Macros
==========================

Description
^^^^^^^^^^^

The following macros can be used to build a new function from a |nt2| functor
component. Various level of details are provided to supply proper boilerplate
code in case of specific function signature.

.. seealso::

  :ref:`howto_custom_function`

Header File
^^^^^^^^^^^

.. code-block:: cpp

  #include <nt2/sdk/functor/preprocessor/function.hpp>

.. _nt2_function_implementation:

NT2_FUNCTION_IMPLEMENTATION
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. index:: NT2_FUNCTION_IMPLEMENTATION

Synopsis
--------

.. code-block:: cpp

  #define NT2_FUNCTION_IMPLEMENTATION(NAME,TAG,N)

Description
-----------
Generate a complete inline function named ``NAME``, taking ``N``
arguments and calling the implementation described by ``TAG``.

Arguments
---------

  +-----------+---------------------------------------+
  | Arguments |  Description                          |
  +===========+=======================================+
  | ``NAME``  | Function identifier                   |
  +-----------+---------------------------------------+
  | ``TAG``   | Functor implementation tag            |
  +-----------+---------------------------------------+
  | ``N``     | Number of function arguments          |
  +-----------+---------------------------------------+

NT2_FUNCTION_IMPLEMENTATION_SELF
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Synopsis
--------

.. code-block:: cpp

  #define NT2_FUNCTION_IMPLEMENTATION_SELF(NAME,TAG,N)(NAME,TAG,N)

Description
-----------
Generate a complete inline function named ``NAME``, taking ``N`` arguments and
calling the implementation described by ``TAG`` but with the first argument being
passed by non-const reference. Currently, ``N`` can't be greater than 2. Except
for the argument passing protocol, the code generated is equivalent to the one
generated by NT2_FUNCTION_IMPLEMENTATION_

Arguments
---------

  +-----------+---------------------------------------+
  | Arguments |  Description                          |
  +===========+=======================================+
  | ``NAME``  | Function identifier                   |
  +-----------+---------------------------------------+
  | ``TAG``   | Functor implementation tag            |
  +-----------+---------------------------------------+
  | ``N``     | Number of function arguments          |
  +-----------+---------------------------------------+

NT2_FUNCTION_INTERFACE
^^^^^^^^^^^^^^^^^^^^^^

Synopsis
--------

.. code-block:: cpp

  #define NT2_FUNCTION_INTERFACE(NAME,TAG,N)

Description
-----------
Generate a valid |nt2| functions prototype called ``NAME``, taking ``N``
arguments passed by reference to constant and using ``TAG`` as concrete
implementation.

Arguments
---------

  +-----------+---------------------------------------+
  | Arguments |  Description                          |
  +===========+=======================================+
  | ``NAME``  | Function identifier                   |
  +-----------+---------------------------------------+
  | ``TAG``   | Functor implementation tag            |
  +-----------+---------------------------------------+
  | ``N``     | Number of function arguments          |
  +-----------+---------------------------------------+

NT2_FUNCTION_BODY
^^^^^^^^^^^^^^^^^

Synopsis
--------

.. code-block:: cpp

  #define NT2_FUNCTION_BODY(TAG,N,V)

Description
-----------
Generate a function body by instanciating a ``functor<TAG>``
and calling it on the ``N`` arguments named ``V``.

Arguments
---------

  +-----------+---------------------------------------+
  | Arguments |  Description                          |
  +===========+=======================================+
  | ``TAG``   | Functor implementation tag            |
  +-----------+---------------------------------------+
  | ``N``     | Number of function arguments          |
  +-----------+---------------------------------------+
  | ``V``     | Identifier base for arguments         |
  +-----------+---------------------------------------+
