  template<class F, class Site, class A0> struct enable_call < F(A0) , Site , typename enable_if_type< typename details:: callable_type < typename dispatch_call< F(A0) , Site >::type >::type >::type > : meta::result_of<functor<F,Site>(A0)> {}; template<class F, class Site, class A0 , class A1> struct enable_call < F(A0 , A1) , Site , typename enable_if_type< typename details:: callable_type < typename dispatch_call< F(A0 , A1) , Site >::type >::type >::type > : meta::result_of<functor<F,Site>(A0 , A1)> {}; template<class F, class Site, class A0 , class A1 , class A2> struct enable_call < F(A0 , A1 , A2) , Site , typename enable_if_type< typename details:: callable_type < typename dispatch_call< F(A0 , A1 , A2) , Site >::type >::type >::type > : meta::result_of<functor<F,Site>(A0 , A1 , A2)> {}; template<class F, class Site, class A0 , class A1 , class A2 , class A3> struct enable_call < F(A0 , A1 , A2 , A3) , Site , typename enable_if_type< typename details:: callable_type < typename dispatch_call< F(A0 , A1 , A2 , A3) , Site >::type >::type >::type > : meta::result_of<functor<F,Site>(A0 , A1 , A2 , A3)> {}; template<class F, class Site, class A0 , class A1 , class A2 , class A3 , class A4> struct enable_call < F(A0 , A1 , A2 , A3 , A4) , Site , typename enable_if_type< typename details:: callable_type < typename dispatch_call< F(A0 , A1 , A2 , A3 , A4) , Site >::type >::type >::type > : meta::result_of<functor<F,Site>(A0 , A1 , A2 , A3 , A4)> {};
