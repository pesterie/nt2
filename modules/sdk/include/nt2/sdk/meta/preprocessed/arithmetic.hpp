                      /**/
    template<class This,class A0 , class A1> struct result<This(A0 , A1)> { static typename meta::strip<A0>::type& a0; static typename meta::strip<A1>::type& a1; BOOST_TYPEOF_NESTED_TYPEDEF_TPL ( nested , a0 + a1) typedef typename nested::type type; }; template<class This,class A0 , class A1 , class A2> struct result<This(A0 , A1 , A2)> { static typename meta::strip<A0>::type& a0; static typename meta::strip<A1>::type& a1; static typename meta::strip<A2>::type& a2; BOOST_TYPEOF_NESTED_TYPEDEF_TPL ( nested , a0 + a1 + a2) typedef typename nested::type type; }; template<class This,class A0 , class A1 , class A2 , class A3> struct result<This(A0 , A1 , A2 , A3)> { static typename meta::strip<A0>::type& a0; static typename meta::strip<A1>::type& a1; static typename meta::strip<A2>::type& a2; static typename meta::strip<A3>::type& a3; BOOST_TYPEOF_NESTED_TYPEDEF_TPL ( nested , a0 + a1 + a2 + a3) typedef typename nested::type type; };
    
    
